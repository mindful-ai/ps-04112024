Build:
> docker build -t my-app .

Test:
> docker run -p 5000:5000 my-app

-----------------------------------------------------------------------------------------------
Push the Docker Image to Amazon Elastic Container Registry (ECR)
-----------------------------------------------------------------------------------------------

Create a new repository in Amazon ECR:

Go to the ECR console and click on Create repository.
Name your repository (e.g., my-app-repo).

purushotham/training-repo

-----------------------------------------------------------------------------------------------
Authenticate Docker to ECR, tag and push:


Username: In the case of ECR, the username is always AWS. This is a default set by AWS 
for all users accessing their private ECR repositories.

Password: The password is dynamically generated by the aws ecr get-login-password command. 
It is an authentication token that allows Docker to log into your ECR registry securely. 
This token is valid for 12 hours.

> aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 069641793383.dkr.ecr.ap-south-1.amazonaws.com 
> docker tag my-app:latest 069641793383.dkr.ecr.ap-south-1.amazonaws.com/purushotham/training-repo:latest
> docker push 069641793383.dkr.ecr.ap-south-1.amazonaws.com/purushotham/training-repo:latest

------------------------------------------------------------------------------------------------------

Deploy the Docker Container on Amazon ECS

-> Create a cluster, choose Fargate


Create a task definition

-> Refer to the container in ECR

Come back to ECS:

-> Create a new task for running the container

Wait until InService and check for the public IP


Security Groups and NACLs:

Check the security group associated with your ECS task and ensure it allows outbound traffic 
on port 443 (HTTPS), as that's required for communicating with ECR.